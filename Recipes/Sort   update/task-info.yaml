type: edu
custom_name: Sort & update
files:
- name: src/recipes/RecipesApplication.java
  visible: true
  text: |
    package recipes;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class RecipesApplication {
        public static void main(String[] args) {
            SpringApplication.run(RecipesApplication.class, args);
        }
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=8881
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        apply plugin: 'hyperskill'

        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: test/RecipesApplicationTest.java
  visible: false
  text: |
    import com.google.gson.Gson;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.UnexpectedError;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;
    import static org.hyperskill.hstest.testing.expect.Expectation.expect;

    import org.hyperskill.hstest.testing.expect.json.builder.JsonArrayBuilder;
    import recipes.RecipesApplication;

    import java.util.*;

    import static org.hyperskill.hstest.testcase.CheckResult.correct;


    public class RecipesApplicationTest extends SpringTest {

        public RecipesApplicationTest() {
            super(RecipesApplication.class, "../recipes_db.mv.db");
        }

        // Initialization ---

        static class Recipe {
            final String name;
            final String category;
            final String description;
            final String[] ingredients;
            final String[] directions;

            Recipe(String name, String category, String description, String[] ingredients, String[] directions) {
                this.name = name;
                this.category = category;
                this.description = description;
                this.ingredients = ingredients;
                this.directions = directions;
            }
        }

        final Recipe[] RECIPES = {
            // 0
            new Recipe(
                "Fresh Mint Tea /Test",
                "beverage /Test",
                "Light, aromatic and refreshing beverage, ... /Test",
                new String[]{"boiled water", "honey", "fresh mint leaves /Test"},
                new String[]{"Boil water", "Pour boiling hot water into a mug", "Add fresh mint leaves", "Mix and let the mint leaves seep for 3-5 minutes", "Add honey and mix again /Test"}
            ),
            // 1
            new Recipe(
                "Warming Ginger Tea /Test",
                "beverage /Test",
                "Ginger tea is a warming drink for cool weather, ... /Test",
                new String[]{"1 inch ginger root, minced", "1/2 lemon, juiced", "1/2 teaspoon manuka honey /Test"},
                new String[]{"Place all ingredients in a mug and fill with warm water (not too hot so you keep the beneficial honey compounds in tact)", "Steep for 5-10 minutes", "Drink and enjoy /Test"}
            ),
            // 2
            new Recipe(
                "ice-cream",
                "Dessert",
                "-",
                new String[]{"--", "---", "-"},
                new String[]{"----", "---"}
            ),
            // 3
            new Recipe(
                "tea r 4",
                "DesserT",
                "---",
                new String[]{"-", "----", "-"},
                new String[]{"----", "--", "--"}
            ),
            // 4
            new Recipe(
                "recipe ice-cream 5",
                "Desser",
                "---",
                new String[]{"-", "--", "-"},
                new String[]{"-", "--", "---"}
            ),
            // 5
            new Recipe(
                "--",
                "DeSSert",
                "---",
                new String[]{"---", "-", "--"},
                new String[]{"---", "-"}
            ),
            // 6
            new Recipe(
                "ICE-CREAM",
                "desserT",
                "----",
                new String[]{"-", "-", "--"},
                new String[]{"---", "--", "--"}
            ),
            // 7
            new Recipe(
                "---",
                "dessert",
                "--",
                new String[]{"-", "----"},
                new String[]{"-----", "-", "---"}
            ),
            // 8
            new Recipe(
                "9 recipe Tea test",
                "-",
                "----",
                new String[]{"-", "-", "----"},
                new String[]{"-----", "-", "--"}
            ),
            // 9
            new Recipe(
                "10 ice recipe test",
                "-",
                "--",
                new String[]{"----", "--;", "---"},
                new String[]{"--", "-"}
            ),
            // 10
            new Recipe(
                "11 ice-creamrecipe test",
                "veryDessert",
                "-",
                new String[]{"-", "--"},
                new String[]{"-----", "-", "---"}
            ),
            // 11
            new Recipe(
                "cream",
                "BEVerage",
                "--",
                new String[]{"---", "-", "-"},
                new String[]{"-", "--"}
            ),
            // 12
            new Recipe(
                "ice-cre",
                "---Dessert",
                "-",
                new String[]{"---", "-"},
                new String[]{"----", "-", "-"}
            ),

            // 13
            new Recipe(
                "ice-cream",
                "DESSERT",
                "-",
                new String[]{"----", "--"},
                new String[]{"-", "--", "-"}
            ),
            // 14
            new Recipe(
                "15 recipe test ice-CREAM",
                "Dessert",
                "-",
                new String[]{"-", "---'", "-----"},
                new String[]{"---", "-"}
            )
        };

        final Recipe[] INCORRECT_RECIPES = {
            //0
            new Recipe(
                null,
                "beverage",
                "Light, aromatic and refreshing beverage, ...",
                new String[]{"boiled water", "honey", "fresh mint leaves"},
                new String[]{"Boil water", "Pour boiling hot water into a mug", "Add fresh mint leaves", "Mix and let the mint leaves seep for 3-5 minutes", "Add honey and mix again"}
            ),
            //1
            new Recipe(
                "Fresh Mint Tea",
                null,
                "Light, aromatic and refreshing beverage, ...",
                new String[]{"boiled water", "honey", "fresh mint leaves"},
                new String[]{"Boil water", "Pour boiling hot water into a mug", "Add fresh mint leaves", "Mix and let the mint leaves seep for 3-5 minutes", "Add honey and mix again"}
            ),
            //2
            new Recipe(
                "Warming Ginger Tea",
                "beverage",
                null,
                new String[]{"1 inch ginger root, minced", "1/2 lemon, juiced", "1/2 teaspoon manuka honey"},
                new String[]{"Place all ingredients in a mug and fill with warm water (not too hot so you keep the beneficial honey compounds in tact)", "Steep for 5-10 minutes", "Drink and enjoy"}
            ),
            //3
            new Recipe(
                "Fresh Mint Tea",
                "beverage",
                "Light, aromatic and refreshing beverage, ...",
                null,
                new String[]{"Boil water", "Pour boiling hot water into a mug", "Add fresh mint leaves", "Mix and let the mint leaves seep for 3-5 minutes", "Add honey and mix again"}
            ),
            //4
            new Recipe(
                "Warming Ginger Tea",
                "beverage",
                "Ginger tea is a warming drink for cool weather, ...",
                new String[]{"1 inch ginger root, minced", "1/2 lemon, juiced", "1/2 teaspoon manuka honey"},
                null
            ),
            //5
            new Recipe(
                "  ",
                "beverage",
                "Light, aromatic and refreshing beverage, ...",
                new String[]{"boiled water", "honey", "fresh mint leaves"},
                new String[]{"Boil water", "Pour boiling hot water into a mug", "Add fresh mint leaves", "Mix and let the mint leaves seep for 3-5 minutes", "Add honey and mix again"}
            ),
            //6
            new Recipe(
                "Fresh Mint Tea",
                "  ",
                "Light, aromatic and refreshing beverage, ...",
                new String[]{"boiled water", "honey", "fresh mint leaves"},
                new String[]{"Boil water", "Pour boiling hot water into a mug", "Add fresh mint leaves", "Mix and let the mint leaves seep for 3-5 minutes", "Add honey and mix again"}
            ),
            //7
            new Recipe(
                "Warming Ginger Tea",
                "beverage",
                "  ",
                new String[]{"1 inch ginger root, minced", "1/2 lemon, juiced", "1/2 teaspoon manuka honey"},
                new String[]{"Place all ingredients in a mug and fill with warm water (not too hot so you keep the beneficial honey compounds in tact)", "Steep for 5-10 minutes", "Drink and enjoy"}
            ),
            //8
            new Recipe(
                "Fresh Mint Tea",
                "beverage",
                "Light, aromatic and refreshing beverage, ...",
                new String[]{},
                new String[]{"Boil water", "Pour boiling hot water into a mug", "Add fresh mint leaves", "Mix and let the mint leaves seep for 3-5 minutes", "Add honey and mix again"}
            ),
            //9
            new Recipe(
                "Warming Ginger Tea",
                "beverage",
                "Ginger tea is a warming drink for cool weather, ...",
                new String[]{"1 inch ginger root, minced", "1/2 lemon, juiced", "1/2 teaspoon manuka honey"},
                new String[]{}
            )
        };

        final Recipe[] RECIPES_CATEGORY_DESSERT_REVERSED = new Recipe[]{RECIPES[14], RECIPES[13], RECIPES[7], RECIPES[6],
            RECIPES[5], RECIPES[3], RECIPES[2]};

        final Recipe[] RECIPES_NAME_CONTAINS_ICE_CREAM_REVERSED = new Recipe[]{RECIPES[14], RECIPES[13], RECIPES[10], RECIPES[6],
            RECIPES[4], RECIPES[2]};

        final String[] JSON_RECIPES = toJson(RECIPES);
        final String[] JSON_INCORRECT_RECIPES = toJson(INCORRECT_RECIPES);

        final String API_RECIPE_NEW = "/api/recipe/new";
        final String API_RECIPE = "/api/recipe/";
        final String API_RECIPE_SEARCH = "/api/recipe/search/";

        // recipes ids will be saved when testing POST requests and used later to test GET/PUT/DELETE requests
        final List<Integer> recipeIds = new ArrayList<>();


        // Helper functions ---

        static String[] toJson(Object[] objects) {
            final Gson gson = new Gson();
            return Arrays
                .stream(objects)
                .map(gson::toJson)
                .toArray(String[]::new);
        }

        static void throwIfIncorrectStatusCode(HttpResponse response, int status) {
            if (response.getStatusCode() != status) {
                throw new WrongAnswer(response.getRequest().getMethod() +
                    " " + response.getRequest().getLocalUri() +
                    " should respond with status code " + status +
                    ", responded: " + response.getStatusCode() + "\n\n" +
                    "Response body:\n" + response.getContent());
            }
        }

        CheckResult reloadServer() {
            try {
                reloadSpring();
            } catch (Exception e) {
                throw new UnexpectedError(e.getMessage());
            }

            return correct();
        }

        static Map<String, String> generateUrlParams(int len) {
            Map<String, String> params = new LinkedHashMap<>();

            for (int i = 0; i < len; i++) {
                params.put("key" + i, "value" + i);
            }

            return params;
        }

        static void sleep(int milliseconds) {
            try {
                Thread.sleep(milliseconds);
            } catch (Exception e) {
                throw new UnexpectedError(e.getMessage());
            }
        }

        static JsonArrayBuilder recipesToJsonArrayBuilder(Recipe[] recipes) {
            JsonArrayBuilder isArray = isArray();

            // just appends "item"(s)
            for (Recipe recipe : recipes) {

                isArray = isArray.item(
                    isObject()
                        .value("name", isString(recipe.name))
                        .value("category", isString(recipe.category))
                        .value("date", isString(d -> d.length() >= 8))
                        .value("description", isString(recipe.description))
                        .value("ingredients", isArray(recipe.ingredients))
                        .value("directions", isArray(recipe.directions)));
            }

            return isArray;
        }

        // Tests ---

        @DynamicTest
        DynamicTesting[] dt = new DynamicTesting[]{
            () -> testPostRecipe(JSON_RECIPES[0]),
            () -> testPostRecipe(JSON_RECIPES[1]),
            // test 3
            () -> testGetRecipe(recipeIds.get(0), RECIPES[0]),
            () -> testGetRecipe(recipeIds.get(1), RECIPES[1]),
            this::reloadServer,
            () -> testGetRecipe(recipeIds.get(0), RECIPES[0]),
            () -> testGetRecipe(recipeIds.get(1), RECIPES[1]),
            // test 8
            () -> testUpdateRecipe(recipeIds.get(0), JSON_RECIPES[1]),
            () -> testGetRecipe(recipeIds.get(0), RECIPES[1]),

            () -> testDeleteRecipe(recipeIds.get(0)),
            // test 11
            () -> testDeleteRecipeNotFoundStatusCode(recipeIds.get(0)),
            () -> testGetRecipeNotFoundStatusCode(recipeIds.get(0)),
            () -> testUpdateRecipeNotFoundStatusCode(recipeIds.get(0), JSON_RECIPES[1]),


            // Add more recipes before testing if elems sorted correctly by date.
            // Sleep calls added because tests send requests very quickly and this can produce duplicate dates in rare cases.
            // And if a user uses "unstable" sort to sort recipes, tests will be unstable. Thread sleep prevents duplicates.
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[2]);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[3]);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[4]);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[5]);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[6]);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[7]);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[8]);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[9]);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[10]);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[11]);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[12]);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[13]);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[14]);
            },

            // test 27
            () -> testGetRecipesByCategorySorted(RECIPES_CATEGORY_DESSERT_REVERSED, "dessert"),
            () -> testGetRecipesByNameContainsSorted(RECIPES_NAME_CONTAINS_ICE_CREAM_REVERSED, "ice-cream"),

            // test 29
            () -> testGetRecipesByCategorySorted(new Recipe[]{}, "should_return_empty_array_1"),
            () -> testGetRecipesByNameContainsSorted(new Recipe[]{}, "should_return_empty_array_2"),

            // test 31
            () -> testGetRecipesBadRequestStatusCode(0),
            () -> testGetRecipesBadRequestStatusCode(1),
            () -> testGetRecipesBadRequestStatusCode(2),
            () -> testGetRecipesBadRequestStatusCode(5),

            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[0]),
            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[1]),
            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[2]),
            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[3]),
            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[4]),
            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[5]),
            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[6]),
            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[7]),
            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[8]),
            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[9]),

            () -> testUpdateIncorrectRecipeStatusCode(recipeIds.get(1), JSON_INCORRECT_RECIPES[0]),
            () -> testUpdateIncorrectRecipeStatusCode(recipeIds.get(1), JSON_INCORRECT_RECIPES[1]),
            () -> testUpdateIncorrectRecipeStatusCode(recipeIds.get(1), JSON_INCORRECT_RECIPES[2]),
            () -> testUpdateIncorrectRecipeStatusCode(recipeIds.get(1), JSON_INCORRECT_RECIPES[3]),
            () -> testUpdateIncorrectRecipeStatusCode(recipeIds.get(1), JSON_INCORRECT_RECIPES[4]),
            () -> testUpdateIncorrectRecipeStatusCode(recipeIds.get(1), JSON_INCORRECT_RECIPES[5]),
            () -> testUpdateIncorrectRecipeStatusCode(recipeIds.get(1), JSON_INCORRECT_RECIPES[6]),
            () -> testUpdateIncorrectRecipeStatusCode(recipeIds.get(1), JSON_INCORRECT_RECIPES[7]),
            () -> testUpdateIncorrectRecipeStatusCode(recipeIds.get(1), JSON_INCORRECT_RECIPES[8]),
            () -> testUpdateIncorrectRecipeStatusCode(recipeIds.get(1), JSON_INCORRECT_RECIPES[9])
        };


        CheckResult testPostRecipe(String jsonRecipe) {

            HttpResponse response = post(API_RECIPE_NEW, jsonRecipe).send();

            throwIfIncorrectStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("id", isInteger(recipeId -> {
                        recipeIds.add(recipeId);
                        return true;
                    })));

            return correct();
        }

        CheckResult testGetRecipe(int recipeId, Recipe recipe) {

            HttpResponse response = get(API_RECIPE + recipeId).send();

            throwIfIncorrectStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("name", isString(recipe.name))
                    .value("category", isString(recipe.category))
                    .value("date", isString(d -> d.length() >= 8))
                    .value("description", isString(recipe.description))
                    .value("ingredients", isArray(recipe.ingredients))
                    .value("directions", isArray(recipe.directions)));

            return correct();
        }

        CheckResult testUpdateRecipe(int recipeId, String jsonRecipe) {
            HttpResponse response = put(API_RECIPE + recipeId, jsonRecipe).send();

            throwIfIncorrectStatusCode(response, 204);

            return correct();
        }

        CheckResult testDeleteRecipe(int recipeId) {
            HttpResponse response = delete(API_RECIPE + recipeId).send();

            throwIfIncorrectStatusCode(response, 204);

            return correct();
        }

        CheckResult testGetRecipesByCategorySorted(Recipe[] recipes, String category) {
            HttpResponse response = get(API_RECIPE_SEARCH).addParam("category", category).send();

            throwIfIncorrectStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                recipesToJsonArrayBuilder(recipes)
            );

            return correct();
        }

        private CheckResult testGetRecipesByNameContainsSorted(Recipe[] recipes, String name) {
            HttpResponse response = get(API_RECIPE_SEARCH).addParam("name", name).send();

            throwIfIncorrectStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                recipesToJsonArrayBuilder(recipes)
            );

            return correct();
        }

        // Status codes tests
        CheckResult testGetRecipeNotFoundStatusCode(int recipeId) {
            HttpResponse response = get(API_RECIPE + recipeId).send();

            throwIfIncorrectStatusCode(response, 404);

            return correct();
        }

        CheckResult testUpdateRecipeNotFoundStatusCode(int recipeId, String jsonRecipe) {
            HttpResponse response = put(API_RECIPE + recipeId, jsonRecipe).send();

            throwIfIncorrectStatusCode(response, 404);

            return correct();
        }

        CheckResult testDeleteRecipeNotFoundStatusCode(int recipeId) {
            HttpResponse response = delete(API_RECIPE + recipeId).send();

            throwIfIncorrectStatusCode(response, 404);

            return correct();
        }

        CheckResult testGetRecipesBadRequestStatusCode(int numberOfQueryParams) {
            Map<String, String> params = generateUrlParams(numberOfQueryParams);

            HttpResponse response = get(API_RECIPE_SEARCH).addParams(params).send();

            throwIfIncorrectStatusCode(response, 400);

            return correct();
        }

        CheckResult testPostIncorrectRecipeStatusCode(String incorrectJsonRecipe) {
            HttpResponse response = post(API_RECIPE_NEW, incorrectJsonRecipe).send();

            throwIfIncorrectStatusCode(response, 400);

            return correct();
        }

        CheckResult testUpdateIncorrectRecipeStatusCode(int recipeId, String incorrectJsonRecipe) {
            HttpResponse response = put(API_RECIPE + recipeId, incorrectJsonRecipe).send();

            throwIfIncorrectStatusCode(response, 400);

            return correct();
        }
    }
  learner_created: false
- name: src/recipes/domain/Recipe.java
  visible: true
  text: |
    package recipes.domain;

    import com.fasterxml.jackson.annotation.JsonIgnore;
    import lombok.AllArgsConstructor;
    import lombok.Data;
    import lombok.NoArgsConstructor;

    import javax.persistence.*;
    import javax.validation.constraints.NotBlank;
    import javax.validation.constraints.NotEmpty;
    import javax.validation.constraints.Size;
    import java.util.List;

    @Data
    @Entity
    @NoArgsConstructor
    @Table(name = "table_recipes")
    public class Recipe {

        public Recipe(String name, String description, List<String> ingredients, List<String> directions) {
            this.name = name;
            this.description = description;
            this.ingredients = ingredients;
            this.directions = directions;
        }

        @Id
        @GeneratedValue(strategy = GenerationType.AUTO)
        @Column(name = "recipe_id")
        @JsonIgnore
        private Long id;

        @NotBlank
        @NotEmpty
        @Column(name = "name")
        private String name;

        @NotEmpty
        @NotBlank
        @Column(name = "description")
        private String description;

        @NotEmpty
        @Size(min = 1)
        @ElementCollection
        @CollectionTable(name = "table_ingredients", joinColumns = @JoinColumn(name = "ingredient_id"))
        @Column(name = "ingredients")
        private List<String> ingredients;

        @NotEmpty
        @Size(min = 1)
        @ElementCollection
        @CollectionTable(name = "table_directions", joinColumns = @JoinColumn(name = "direction_id"))
        @Column(name = "directions")
        private List<String> directions;

    }
  learner_created: true
- name: src/recipes/controller/RecipeController.java
  visible: true
  text: |
    package recipes.controller;

    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.*;
    import recipes.domain.Recipe;
    import recipes.service.IdRecipe;
    import recipes.service.RecipeService;

    import javax.validation.Valid;

    @RestController
    @RequestMapping("/api/recipe")
    public class RecipeController {

        private final RecipeService recipeService;

        @Autowired
        public RecipeController(RecipeService recipeService) {
            this.recipeService = recipeService;
        }

        @PostMapping("/new")
        public ResponseEntity<IdRecipe> createRecipe(@RequestBody @Valid Recipe recipe) {
            return recipeService.saveRecipe(recipe);
        }


        @GetMapping("/{id}")
        public ResponseEntity<Recipe> getRecipe(@PathVariable long id) {
            return recipeService.findRecipeById(id);
        }


        @DeleteMapping("/{id}")
        public ResponseEntity<HttpStatus> deleteRecipe(@PathVariable long id) {
            return recipeService.deleteRecipeById(id);
        }

    }
  learner_created: true
- name: src/recipes/repos/RecipeRepository.java
  visible: true
  text: |
    package recipes.repos;

    import org.springframework.data.repository.CrudRepository;
    import recipes.domain.Recipe;

    public interface RecipeRepository extends CrudRepository<Recipe, Long> {

    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/13091#comment
status: Failed
feedback:
  message: "Exception in test #1\n\nCannot start Spring application\n\norg.springframework.beans.factory.BeanCreationException:\
    \ Error creating bean with name &#39;requestMappingHandlerMapping&#39; defined\
    \ in class path resource [org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfiguration$EnableWebMvcConfiguration.class]:\
    \ Invocation of init method failed; nested exception is java.lang.IllegalStateException:\
    \ Ambiguous mapping. Cannot map &#39;recipeController&#39; method \nrecipes.controller.RecipeController#searchRecipesByCategory(String)\n\
    to {GET [/api/recipe/search]}: There is already &#39;recipeController&#39; bean\
    \ method\nrecipes.controller.RecipeController#searchRecipesByName(String) mapped.\r\
    \n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804)\r\
    \n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)\r\
    \n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)\r\
    \n\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)\r\
    \n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)\r\
    \n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)\r\
    \n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)\r\
    \n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:944)\r\
    \n\tat org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:918)\r\
    \n\tat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)\r\
    \n\tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:145)\r\
    \n\tat org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)\r\
    \n\tat org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:434)\r\
    \n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:338)\r\
    \n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)\r\
    \n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1332)\r\
    \n\tat recipes.RecipesApplication.main(RecipesApplication.java:9)\n\nPlease find\
    \ below the output of your program during this failed test.\n\n---\n\n.   ____\
    \          _            __ _ _\n /\\\\ / ___&#39;_ __ _ _(_)_ __  __ _ \\ \\ \\\
    \ \\\n( ( )\\___ | &#39;_ | &#39;_| | &#39;_ \\/ _` | \\ \\ \\ \\\n \\\\/  ___)|\
    \ |_)| | | | | || (_| |  ) ) ) )\n  &#39;  |____| .__|_| |_|_| |_\\__, | / / /\
    \ /\n =========|_|==============|___/=/_/_/_/\n :: Spring Boot ::            \
    \    (v2.5.6)\n\n2022-03-05 22:56:31.875  INFO 6016 --- [    Test worker] recipes.RecipesApplication\
    \               : Starting RecipesApplication using Java 17.0.1 on DESKTOP-L7B3B4M\
    \ with PID 6016 (started by matro in C:\\Users\\matro\\Documents\\IdeaProjects\\\
    Recipes1\\Recipes\\task)\n2022-03-05 22:56:31.878  INFO 6016 --- [    Test worker]\
    \ recipes.RecipesApplication               : No active profile set, falling back\
    \ to default profiles: default\n2022-03-05 22:56:33.998  INFO 6016 --- [    Test\
    \ worker] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data\
    \ JPA repositories in DEFAULT mode.\n2022-03-05 22:56:34.108  INFO 6016 --- [\
    \    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data\
    \ repository scanning in 71 ms. Found 1 JPA repository interfaces.\n2022-03-05\
    \ 22:56:35.435  INFO 6016 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer\
    \  : Tomcat initialized with port(s): 8881 (http)\n2022-03-05 22:56:35.466  INFO\
    \ 6016 --- [    Test worker] o.apache.catalina.core.StandardService   : Starting\
    \ service [Tomcat]\n2022-03-05 22:56:35.466  INFO 6016 --- [    Test worker] org.apache.catalina.core.StandardEngine\
    \  : Starting Servlet engine: [Apache Tomcat/9.0.54]\n2022-03-05 22:56:35.606\
    \  INFO 6016 --- [    Test worker] o.a.c.c.C.[Tomcat].[localhost].[/]       :\
    \ Initializing Spring embedded WebApplicationContext\n2022-03-05 22:56:35.606\
    \  INFO 6016 --- [    Test worker] w.s.c.ServletWebServerApplicationContext :\
    \ Root WebApplicationContext: initialization completed in 3655 ms\n2022-03-05\
    \ 22:56:35.802  INFO 6016 --- [    Test worker] com.zaxxer.hikari.HikariDataSource\
    \       : HikariPool-1 - Starting...\n2022-03-05 22:56:36.208  INFO 6016 --- [\
    \    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start\
    \ completed.\n2022-03-05 22:56:36.223  INFO 6016 --- [    Test worker] o.s.b.a.h2.H2ConsoleAutoConfiguration\
    \    : H2 console available at &#39;/h2&#39;. Database available at &#39;jdbc:h2:file:../recipes_db&#39;\n\
    2022-03-05 22:56:36.927  INFO 6016 --- [    Test worker] o.hibernate.jpa.internal.util.LogHelper\
    \  : HHH000204: Processing PersistenceUnitInfo [name: default]\n2022-03-05 22:56:37.052\
    \  INFO 6016 --- [    Test worker] org.hibernate.Version                    :\
    \ HHH000412: Hibernate ORM core version 5.4.32.Final\n2022-03-05 22:56:37.615\
    \  INFO 6016 --- [    Test worker] o.hibernate.annotations.common.Version   :\
    \ HCANN000001: Hibernate Commons Annotations {5.1.2.Final}\n2022-03-05 22:56:37.833\
    \  INFO 6016 --- [    Test worker] org.hibernate.dialect.Dialect            :\
    \ HHH000400: Using dialect: org.hibernate.dialect.H2Dialect\nHibernate: drop table\
    \ if exists table_directions CASCADE \nHibernate: drop table if exists table_ingredients\
    \ CASCADE \nHibernate: drop table if exists table_recipes CASCADE \nHibernate:\
    \ drop sequence if exists hibernate_sequence\nHibernate: create sequence hibernate_sequence\
    \ start with 1 increment by 1\nHibernate: create table table_directions (direction_id\
    \ bigint not null, directions varchar(255))\nHibernate: create table table_ingredients\
    \ (ingredient_id bigint not null, ingredients varchar(255))\nHibernate: create\
    \ table table_recipes (recipe_id bigint not null, category varchar(255), description\
    \ varchar(255), name varchar(255), date timestamp, primary key (recipe_id))\n\
    Hibernate: alter table table_directions add constraint FKq7jfvm97hr48ksoynp77bby29\
    \ foreign key (direction_id) references table_recipes\nHibernate: alter table\
    \ table_ingredients add constraint FKkb0nk2jc8fm5nm6opde7xdxjo foreign key (ingredient_id)\
    \ references table_recipes\n2022-03-05 22:56:38.802  INFO 6016 --- [    Test worker]\
    \ o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation:\
    \ [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]\n2022-03-05\
    \ 22:56:38.817  INFO 6016 --- [    Test worker] j.LocalContainerEntityManagerFactoryBean\
    \ : Initialized JPA EntityManagerFactory for persistence unit &#39;default&#39;\n\
    2022-03-05 22:56:39.913  WARN 6016 --- [    Test worker] JpaBaseConfiguration$JpaWebConfiguration\
    \ : spring.jpa.open-in-view is enabled by default. Therefore, database queries\
    \ may be performed during view rendering. Explicitly configure spring.jpa.open-in-view\
    \ to disable this warning\n2022-03-05 22:56:40.273  WARN 6016 --- [    Test worker]\
    \ ConfigServletWebServerApplicationContext : Exception encountered during context\
    \ initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException:\
    \ Error creating bean with name &#39;requestMappingHandlerMapping&#39; defined\
    \ in class path resource [org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfiguration$EnableWebMvcConfiguration.class]:\
    \ Invocation of init method failed; nested exception is java.lang.IllegalStateException:\
    \ Ambiguous mapping. Cannot map &#39;recipeController&#39; method \nrecipes.controller.RecipeController#searchRecipesByCategory(String)\n\
    to {GET [/api/recipe/search]}: There is already &#39;recipeController&#39; bean\
    \ method\nrecipes.controller.RecipeController#searchRecipesByName(String) mapped.\n\
    2022-03-05 22:56:40.273  INFO 6016 --- [    Test worker] j.LocalContainerEntityManagerFactoryBean\
    \ : Closing JPA EntityManagerFactory for persistence unit &#39;default&#39;\n\
    2022-03-05 22:56:40.273  INFO 6016 --- [    Test worker] com.zaxxer.hikari.HikariDataSource\
    \       : HikariPool-1 - Shutdown initiated...\n2022-03-05 22:56:40.288  INFO\
    \ 6016 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-1\
    \ - Shutdown completed.\n2022-03-05 22:56:40.288  INFO 6016 --- [    Test worker]\
    \ o.apache.catalina.core.StandardService   : Stopping service [Tomcat]\n2022-03-05\
    \ 22:56:40.320  INFO 6016 --- [    Test worker] ConditionEvaluationReportLoggingListener\
    \ : \n\nError starting ApplicationContext. To display the conditions report re-run\
    \ your application with &#39;debug&#39; enabled.\n2022-03-05 22:56:40.351 ERROR\
    \ 6016 --- [    Test worker] o.s.boot.SpringApplication               : Application\
    \ run failed\n\norg.springframework.beans.factory.BeanCreationException: Error\
    \ creating bean with name &#39;requestMappingHandlerMapping&#39; defined in class\
    \ path resource [org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfiguration$EnableWebMvcConfiguration.class]:\
    \ Invocation of init method failed; nested exception is java.lang.IllegalStateException:\
    \ Ambiguous mapping. Cannot map &#39;recipeController&#39; method \nrecipes.controller.RecipeController#searchRecipesByCategory(String)\n\
    to {GET [/api/recipe/search]}: There is already &#39;recipeController&#39; bean\
    \ method\nrecipes.controller.RecipeController#searchRecipesByName(String) mapped.\n\
    \tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804)\
    \ ~[spring-beans-5.3.12.jar:5.3.12]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)\
    \ ~[spring-beans-5.3.12.jar:5.3.12]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)\
    \ ~[spring-beans-5.3.12.jar:5.3.12]\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)\
    \ ~[spring-beans-5.3.12.jar:5.3.12]\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)\
    \ ~[spring-beans-5.3.12.jar:5.3.12]\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)\
    \ ~[spring-beans-5.3.12.jar:5.3.12]\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)\
    \ ~[spring-beans-5.3.12.jar:5.3.12]\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:944)\
    \ ~[spring-beans-5.3.12.jar:5.3.12]\n\tat org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:918)\
    \ ~[spring-context-5.3.12.jar:5.3.12]\n\tat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)\
    \ ~[spring-context-5.3.12.jar:5.3.12]\n\tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:145)\
    \ ~[spring-boot-2.5.6.jar:2.5.6]\n\tat org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)\
    \ ~[spring-boot-2.5.6.jar:2.5.6]\n\tat org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:434)\
    \ ~[spring-boot-2.5.6.jar:2.5.6]\n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:338)\
    \ ~[spring-boot-2.5.6.jar:2.5.6]\n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)\
    \ ~[spring-boot-2.5.6.jar:2.5.6]\n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1332)\
    \ ~[spring-boot-2.5.6.jar:2.5.6]\n\tat recipes.RecipesApplication.main(RecipesApplication.java:9)\
    \ ~[main/:na]\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method) ~[na:na]\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\
    \ ~[na:na]\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\
    \ ~[na:na]\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568) ~[na:na]\n\
    \tat org.hyperskill.hstest.stage.SpringTest.startSpring(SpringTest.java:139) ~[hs-test-release-SNAPSHOT.jar:na]\n\
    \tat org.hyperskill.hstest.stage.SpringTest.launchSpring(SpringTest.java:50) ~[hs-test-release-SNAPSHOT.jar:na]\n\
    \tat org.hyperskill.hstest.testing.runner.SpringApplicationRunner.launchSpringBootApplication(SpringApplicationRunner.java:20)\
    \ ~[hs-test-release-SNAPSHOT.jar:na]\n\tat org.hyperskill.hstest.testing.runner.SpringApplicationRunner.setUp(SpringApplicationRunner.java:35)\
    \ ~[hs-test-release-SNAPSHOT.jar:na]\n\tat org.hyperskill.hstest.testing.TestRun.setUp(TestRun.java:70)\
    \ ~[hs-test-release-SNAPSHOT.jar:na]\n\tat org.hyperskill.hstest.stage.StageTest.start(StageTest.java:111)\
    \ ~[hs-test-release-SNAPSHOT.jar:na]\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method) ~[na:na]\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\
    \ ~[na:na]\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\
    \ ~[na:na]\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568) ~[na:na]\n\
    \tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)\
    \ ~[junit-4.13.2.jar:4.13.2]\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\
    \ ~[junit-4.13.2.jar:4.13.2]\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)\
    \ ~[junit-4.13.2.jar:4.13.2]\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\
    \ ~[junit-4.13.2.jar:4.13.2]\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\
    \ ~[junit-4.13.2.jar:4.13.2]\n\tat org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)\
    \ ~[junit-4.13.2.jar:4.13.2]\n\tat org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)\
    \ ~[junit-4.13.2.jar:4.13.2]\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)\
    \ ~[junit-4.13.2.jar:4.13.2]\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)\
    \ ~[junit-4.13.2.jar:4.13.2]\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)\
    \ ~[junit-4.13.2.jar:4.13.2]\n\tat org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)\
    \ ~[junit-4.13.2.jar:4.13.2]\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)\
    \ ~[junit-4.13.2.jar:4.13.2]\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)\
    \ ~[junit-4.13.2.jar:4.13.2]\n\tat org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)\
    \ ~[junit-4.13.2.jar:4.13.2]\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)\
    \ ~[junit-4.13.2.jar:4.13.2]\n\tat org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)\
    \ ~[junit-4.13.2.jar:4.13.2]\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:413)\
    \ ~[junit-4.13.2.jar:4.13.2]\n\tat org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:110)\
    \ ~[na:na]\n\tat org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58)\
    \ ~[na:na]\n\tat org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38)\
    \ ~[na:na]\n\tat org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:62)\
    \ ~[na:na]\n\tat org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51)\
    \ ~[na:na]\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method) ~[na:na]\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\
    \ ~[na:na]\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\
    \ ~[na:na]\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568) ~[na:na]\n\
    \tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)\
    \ ~[na:na]\n\tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)\
    \ ~[na:na]\n\tat org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)\
    \ ~[na:na]\n\tat org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94)\
    \ ~[na:na]\n\tat jdk.proxy1/jdk.proxy1.$Proxy2.processTestClass(Unknown Source)\
    \ ~[na:na]\n\tat org.gradle.api.internal.tasks.testing.worker.TestWorker$2.run(TestWorker.java:176)\
    \ ~[na:na]\n\tat org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:129)\
    \ ~[na:na]\n\tat org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:100)\
    \ ~[na:na]\n\tat org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:60)\
    \ ~[na:na]\n\tat org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)\
    \ ~[na:na]\n\tat org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:133)\
    \ ~[na:na]\n\tat org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:71)\
    \ ~[na:na]\n\tat worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)\
    \ ~[gradle-worker.jar:na]\n\tat worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)\
    \ ~[gradle-worker.jar:na]\nCaused by: java.lang.IllegalStateException: Ambiguous\
    \ mapping. Cannot map &#39;recipeController&#39; method \nrecipes.controller.RecipeController#searchRecipesByCategory(String)\n\
    to {GET [/api/recipe/search]}: There is already &#39;recipeController&#39; bean\
    \ method\nrecipes.controller.RecipeController#searchRecipesByName(String) mapped.\n\
    \tat org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.validateMethodMapping(AbstractHandlerMethodMapping.java:669)\
    \ ~[spring-webmvc-5.3.12.jar:5.3.12]\n\tat org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:635)\
    \ ~[spring-webmvc-5.3.12.jar:5.3.12]\n\tat org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.registerHandlerMethod(AbstractHandlerMethodMapping.java:332)\
    \ ~[spring-webmvc-5.3.12.jar:5.3.12]\n\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping.registerHandlerMethod(RequestMappingHandlerMapping.java:395)\
    \ ~[spring-webmvc-5.3.12.jar:5.3.12]\n\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping.registerHandlerMethod(RequestMappingHandlerMapping.java:76)\
    \ ~[spring-webmvc-5.3.12.jar:5.3.12]\n\tat org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.lambda$detectHandlerMethods$2(AbstractHandlerMethodMapping.java:299)\
    \ ~[spring-webmvc-5.3.12.jar:5.3.12]\n\tat java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:721)\
    \ ~[na:na]\n\tat org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.detectHandlerMethods(AbstractHandlerMethodMapping.java:297)\
    \ ~[spring-webmvc-5.3.12.jar:5.3.12]\n\tat org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.processCandidateBean(AbstractHandlerMethodMapping.java:266)\
    \ ~[spring-webmvc-5.3.12.jar:5.3.12]\n\tat org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.initHandlerMethods(AbstractHandlerMethodMapping.java:225)\
    \ ~[spring-webmvc-5.3.12.jar:5.3.12]\n\tat org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.afterPropertiesSet(AbstractHandlerMethodMapping.java:213)\
    \ ~[spring-webmvc-5.3.12.jar:5.3.12]\n\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping.afterPropertiesSet(RequestMappingHandlerMapping.java:206)\
    \ ~[spring-webmvc-5.3.12.jar:5.3.12]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.lambda$invokeInitMethods$5(AbstractAutowireCapableBeanFactory.java:1854)\
    \ ~[spring-beans-5.3.12.jar:5.3.12]\n\tat java.base/java.security.AccessController.doPrivileged(AccessController.java:712)\
    \ ~[na:na]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1853)\
    \ ~[spring-beans-5.3.12.jar:5.3.12]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)\
    \ ~[spring-beans-5.3.12.jar:5.3.12]\n\t... 70 common frames omitted"
  time: Sat, 05 Mar 2022 19:56:41 UTC
record: 4
