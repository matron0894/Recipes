type: edu
files:
- name: src/task/Main.java
  visible: false
  text: |-
    package task;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;

    import org.hyperskill.hstest.testcase.CheckResult;
    import task.Main;

    import java.util.Random;

    import static org.hyperskill.hstest.testcase.CheckResult.correct;
    import static org.hyperskill.hstest.testcase.CheckResult.wrong;


    public class Tests extends SpringTest {

        public Tests() {
            super(Main.class);
        }

        static void throwIfIncorrectStatusCode(HttpResponse response, int status) {
            if (response.getStatusCode() != status) {
                throw new WrongAnswer(response.getRequest().getMethod() +
                        " " + response.getRequest().getLocalUri() +
                        " should respond with status code " + status +
                        ", responded: " + response.getStatusCode() + "\n\n" +
                        "Response body:\n" + response.getContent());
            }
        }

        final Random rand = new Random();

        final int[] IDS = new int[]{
                1,
                2,
                3,
                97,
                98,
                99,
                rand.nextInt(80) + 10,
                rand.nextInt(80) + 10,
        };

        final int[] INCORRECT_IDS = new int[]{
                -2,
                -1,
                0,
                100,
                101,
                102,
                rand.nextInt(1000) - 10000,
                rand.nextInt(1000) + 10000,
        };

        @DynamicTest
        final DynamicTesting[] dt = new DynamicTesting[]{
                () -> testGet(IDS[0]),
                () -> testGet(IDS[1]),
                () -> testGet(IDS[2]),
                () -> testGet(IDS[3]),
                () -> testGet(IDS[4]),
                () -> testGet(IDS[5]),
                () -> testGet(IDS[6]),
                () -> testGet(IDS[7]),

                () -> testGetBadRequestStatusCode(INCORRECT_IDS[0]),
                () -> testGetBadRequestStatusCode(INCORRECT_IDS[1]),
                () -> testGetBadRequestStatusCode(INCORRECT_IDS[2]),
                () -> testGetBadRequestStatusCode(INCORRECT_IDS[3]),
                () -> testGetBadRequestStatusCode(INCORRECT_IDS[4]),
                () -> testGetBadRequestStatusCode(INCORRECT_IDS[5]),
                () -> testGetBadRequestStatusCode(INCORRECT_IDS[6]),
                () -> testGetBadRequestStatusCode(INCORRECT_IDS[7]),
        };

        CheckResult testGet(int id) {
            HttpResponse response = get("/test/" + id).send();

            throwIfIncorrectStatusCode(response, 200);

            if (!Integer.toString(id).equals(response.getContent()))
                return wrong("Expected: \"" + id + "\", received: \"" + response.getContent() + "\"");

            return correct();
        }

        CheckResult testGetBadRequestStatusCode(int id) {
            HttpResponse response = get("/test/" + id).send();

            throwIfIncorrectStatusCode(response, 500);

            return correct();
        }
    }
  learner_created: false
- name: build.gradle
  visible: false
  text: |-
    buildscript {
        apply plugin: 'hyperskill'

        repositories {
            mavenCentral()
        }

        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: "org.springframework.boot"
    apply plugin: "io.spring.dependency-management"

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-validation'
    }
  learner_created: false
- name: resources/application.properties
  visible: false
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: src/task/Controller.java
  visible: true
  text: |
    package task;

    import org.springframework.validation.annotation.*;
    import org.springframework.web.bind.annotation.*;

    import javax.validation.constraints.*;

    @RestController
    @Validated
    public class Controller {

        @GetMapping("/test/{id}")
        public int test(@PathVariable int id) {
            return id;
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/15219#comment
status: Solved
feedback:
  message: Congratulations!
  time: Mon, 28 Feb 2022 18:32:56 UTC
record: -1
